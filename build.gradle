defaultTasks 'help'

apply plugin: 'scala'
apply plugin: 'application'
apply plugin: 'build-dashboard'

import org.gradle.plugins.ide.eclipse.model.SourceFolder 
import java.util.regex.Pattern

ext {
  scala_version = "2.10.3"
  scala_xml_version = "2.10.3"
  scalatest_version = "2.0"
  neo4j_version = "2.0.1"
  mockito_version = "1.9.0"
  scala_version_short = "2.10"
}


allprojects {
  apply plugin: 'eclipse'
  apply plugin: 'idea'
  apply plugin: 'scala'

  repositories {
    mavenCentral()
    mavenLocal()
    maven {
      url "http://m2.neo4j.org/content/repositories/releases"
    }
  }

  dependencies {
    compile group: "org.scala-lang", name: "scala-library", version: scala_version
    compile group: "org.scala-lang", name: "scala-reflect", version: scala_version
  }
  
  tasks.eclipse << {
    if (subprojects.size() != 0) {
      delete '.project', '.settings', '.classpath'
    }
  }

  tasks.withType(ScalaCompile) {
    //scalaCompileOptions.useAnt = false
    configure(scalaCompileOptions.forkOptions) {
      memoryMaximumSize = '1g'
      jvmArgs = ['-XX:MaxPermSize=512m']
    }
  }
}

subprojects {
  apply plugin: 'eclipse'

  dependencies {
    //compile group: "org.scala-lang", name: "scala-xml", version: scala_xml_version
    //compile group: "org.scala-lang.modules", name: "scala-parser-combinators_2.11.0-M4", version: "1.0-RC1"
    compile group: "org.clapper", name: "grizzled-slf4j_2.10", version: "1.0.2"
    compile group: "ch.qos.logback", name: "logback-classic", version: "1.1.2"
    compile group: "ch.qos.logback", name: "logback-access", version: "1.1.2"
    
    testCompile group: "org.scalatest", name: "scalatest_" + scala_version_short, version: scalatest_version
    testCompile group: "org.mockito", name: "mockito-all", version: mockito_version
    testCompile group: "junit", name: "junit", version: "4.11"
    

    if (project.name != 'common') {
      compile project(':common')
    }
  }

  test {
    testLogging {
      stackTraceFilters "truncate"
      events "passed", "skipped", "failed", "standardOut", "standardError"
      displayGranularity 3
      minGranularity 3
      maxGranularity 3
    }
  }

  tasks.eclipse.dependsOn(cleanEclipse)
  eclipse {
    classpath {
      file {
        whenMerged { cp ->
          cp.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/main/java") }*.output = "build/classes/main"
          cp.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/test/java") }*.output = "build/classes/test"
          cp.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/main/scala") }*.output = "build/classes/main"
          cp.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/test/scala") }*.output = "build/classes/test"
          cp.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/main/resources") }*.output = "build/resources/main"
          cp.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/test/resources") }*.output = "build/resources/test"
          cp.entries.removeAll(cp.entries.findAll { entry ->
            entry.path.matches(Pattern.compile('scala-(library|reflect|actors)-[.\\d](-M[\\d]+)?.jar')) ||
            entry.path.endsWith('.pom')
          })
        }
      }
      containers += ["org.scala-ide.sdt.launching.SCALA_CONTAINER"]
    }
  }

  if (subprojects.isEmpty()) {
    task copyDistFiles() {
      dependsOn("build")
      File dist = new File(project.getRootProject().buildDir, "dist")
 
      outputs.dir dist
      inputs.files { configurations.runtime.filter {!it.name.endsWith(".pom")} }

      doLast {
        copy {
          fileMode = 0644
          dirMode = 0755
          into mkdir(new File(dist, "lib"))
          from configurations.runtime.filter {!it.name.endsWith(".pom")}
        }
    
        copy {
          fileMode = 0644
          dirMode = 0755
          into mkdir(new File(dist, "settings"))
          File settingsDir = file("src/main/settings")
          if (settingsDir.isDirectory()) {
            from settingsDir
          }
        }
      }
    }
  }
}

def leafs = subprojects.findAll{it.subprojects.isEmpty()}

task dist(dependsOn: leafs.copyDistFiles, type: org.gradle.api.tasks.application.CreateStartScripts) {
  File out = new File("$buildDir/dist")
  def cp = fileTree(dir: new File(out, 'lib'), include: '*.jar')

  inputs.files cp
  outputs.dir out

  mainClassName = "de.jowisoftware.mining.Main"
  outputDir = mkdir(new File(out, "bin"))
  applicationName = "ticketanalyzer"
  classpath = cp
}

task start(dependsOn: leafs.copyDistFiles) << {
  javaexec{
    main = "de.jowisoftware.mining.Main"
    classpath = project(':core').sourceSets.test.runtimeClasspath
  }
}

task help() << {
  println("Userfull tasks:")
  println("  gradle clean   - remove all generated files *")
  println("  gradle start   - execute the application *")
  println("  gradle test    - execute only the tests *")
  println("  gradle dist    - compile everything you need to distribute")
  println("                   the application into build/dist/ *")
  println("  gradle eclipse - create eclipse plugins for all projects")
  println("  gradle tasks   - show all supported tasks")
  println("")
  println("*: you can add '-Pcompact=true' to these commands to produce smaller")
  println("   artifacts which run without the neo4j web interface")
}

task wrapper(type: Wrapper) {
  gradleVersion = '1.11'

  def jvmOpts = "-Xmx512m"
  inputs.property("jvmOpts", jvmOpts)
  doLast {
    def optsEnvVar = "DEFAULT_JVM_OPTS"
    scriptFile.write scriptFile.text.replace("$optsEnvVar=\"\"", "$optsEnvVar=\"$jvmOpts\"")
    batchScript.write batchScript.text.replace("set $optsEnvVar=", "set $optsEnvVar=$jvmOpts")
  }
}
