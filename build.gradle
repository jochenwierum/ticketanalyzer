defaultTasks 'help'

apply plugin: 'scala'
apply plugin: 'application'

import org.gradle.plugins.ide.eclipse.model.SourceFolder 

allprojects {
  apply plugin: 'eclipse'

  tasks.eclipse << {
    if (subprojects.size() != 0) {
      delete '.project', '.settings', '.classpath'
    }
  }
}

subprojects {
  apply plugin: 'scala'
  apply plugin: 'eclipse'

  repositories {
    mavenCentral()
    mavenLocal()
    maven {
      url "http://m2.neo4j.org/content/repositories/releases"
    }
  }
  
  dependencies {
    compile group: "org.scala-lang", name: "scala-library", version: "2.9.2"
    compile group: "org.scala-lang", name: "scala-swing", version: "2.9.2"
    compile group: "org.clapper", name: "grizzled-slf4j_2.9.2", version: "0.6.9"
    compile group: "ch.qos.logback", name: "logback-classic", version: "1.0.6"
    compile group: "ch.qos.logback", name: "logback-access", version: "1.0.6"
    
    testCompile group: "org.scalatest", name: "scalatest_2.9.2", version: "1.7.1"
    testCompile group: "org.mockito", name: "mockito-all", version: "1.9.0"
    

    if (project.name != 'common') {
      compile project(':common')
    }
  }

  test << {
      def oldLevel = logging.getLevel()
      logging.setLevel(LogLevel.INFO) 
    def cp = classpath.filter{file -> !file.name.endsWith(".pom")}.asPath
      ant.taskdef(name: 'scalatest', classname: 'org.scalatest.tools.ScalaTestAntTask', classpath: cp)
      ant.scalatest(runpath: testClassesDir, haltonfailure: 'true', fork: 'false') {
          reporter(type: 'stdout', config: "D")
          //reporter(type: 'stdout', config: "DF")
      }

      if (oldLevel == null)
        logging.setLevel(LogLevel.QUIET)
      else
        logging.setLevel(oldLevel)
  }

  tasks.eclipse.dependsOn(cleanEclipse)
  eclipse {
    classpath {
      file {
        whenMerged { cp ->
          cp.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/main/java") }*.output = "build/classes/main"
          cp.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/main/scala") }*.output = "build/classes/main"
          cp.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/test/java") }*.output = "build/classes/test"
          cp.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/test/scala") }*.output = "build/classes/test"
          cp.entries.findAll { it instanceof SourceFolder && it.path.startsWith("src/test/resources") }*.output = "build/resources/test"
          cp.entries.removeAll(cp.entries.findAll { entry ->
            entry.path.contains('scala-library-2.9.2.jar') ||
            entry.path.contains('scala-swing-2.9.2.jar') ||
            entry.path.endsWith('.pom') ||
            (entry instanceof SourceFolder && entry.path.startsWith("src/main/resources"))
          })
        }
      }
      containers += ["org.scala-ide.sdt.launching.SCALA_CONTAINER"]
    }
  }
}

task copyDistFiles() {
  subprojects.each { dependsOn("${it.path}:build") }
}

copyDistFiles << {
  File dist = mkdir("$buildDir/dist")
  
  copy {
  fileMode = 0644
  dirMode = 0755
    into mkdir(new File(dist, "lib"))
    subprojects.each {
      from it.configurations.runtime.filter {!it.name.endsWith(".pom")}
    }
    from project(':common').configurations.archives.allArtifacts.files
    from project(':core').configurations.archives.allArtifacts.files
  }
  
  copy {
  fileMode = 0644
  dirMode = 0755
    into mkdir(new File(dist, "plugins/importer"))
    project(':importer').subprojects.each {
      from it.configurations.archives.allArtifacts.files
    }
  }
  
  copy {
  fileMode = 0644
  dirMode = 0755
    into mkdir(new File(dist, "plugins/linker"))
    project(':linker').subprojects.each {
      from it.configurations.archives.allArtifacts.files
    }
  }

  copy {
  fileMode = 0644
  dirMode = 0755
    into mkdir(new File(dist, "plugins/analyzer"))
    project(':analyzer').subprojects.each {
      from it.configurations.archives.allArtifacts.files
    }
  }

  copy {
  fileMode = 0644
  dirMode = 0755
    into mkdir(new File(dist, "settings"))
    subprojects.each {
      File settingsDir = it.file("src/main/settings")
      if (settingsDir.isDirectory()) {
        from settingsDir
      }
    }
  }
}

task writeStartScripts(dependsOn: copyDistFiles, type: org.gradle.api.tasks.application.CreateStartScripts) {
  File dist = new File("$buildDir/dist")
  applicationName = "ticketanalyzer"
  classpath = fileTree(dir: new File(dist, 'lib'), include: '*.jar')
  mainClassName = "de.jowisoftware.mining.Main"
  outputDir = mkdir(new File(dist, "bin"))
  
}

task dist(dependsOn: [copyDistFiles, writeStartScripts])

task start(dependsOn: copyDistFiles) << {
  javaexec{
    main = "de.jowisoftware.mining.Main"
    classpath = project(':core').sourceSets.test.runtimeClasspath
  }
}

task help() << {
  println("Userfull tasks:")
  println("  gradle clean   - remove all generated files *")
  println("  gradle start   - execute the application *")
  println("  gradle test    - execute only the tests *")
  println("  gradle dist    - compile everything you need to distribute")
  println("                   the application into build/dist/ *")
  println("  gradle eclipse - create eclipse plugins for all projects")
  println("  gradle tasks   - show all supported tasks")
  println("")
  println("*: you can add '-Pcompact=true' to these commands to produce smaller")
  println("   artifacts which run without the neo4j web interface")
}

task wrapper(type: Wrapper) {
	gradleVersion = '1.10'
}
